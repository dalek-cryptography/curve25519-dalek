use super::*;

use hex::FromHex;

////////////////////////////////////////////////////////////
// Ntor tests                                             //
////////////////////////////////////////////////////////////

#[test]
#[cfg(feature = "elligator2")]
fn pubkey_from_repres() {
    // testcases from golang agl/ed25519
    for (i, vector) in ntor_valid_test_vectors().iter().enumerate() {
        let true_pubkey = vector[2];
        let repres = <[u8; 32]>::from_hex(vector[3]).expect("failed to decode hex representative");

        // ensure that the representative can be reversed to recover the
        // original public key.
        let pubkey = MontgomeryPoint::map_to_point(&repres);
        assert_eq!(
            true_pubkey,
            hex::encode(pubkey.to_bytes()),
            "[good case] agl/ed25519 ({i}) bad pubkey from true representative"
        );
    }
}

#[test]
#[cfg(feature = "elligator2")]
/// Ensure private keys generate the expected representatives. These tests
/// are generated from agl/ed25519 to ensure compatibility.
fn repres_from_privkey_agl() {
    for (i, vector) in ntor_valid_test_vectors().iter().enumerate() {
        let privkey = <[u8; 32]>::from_hex(vector[0]).expect("failed to decode hex privatekey");
        let true_repres = vector[3];

        let pubkey_clean = EdwardsPoint::mul_base_clamped(privkey)
            .to_montgomery()
            .to_bytes();
        assert_eq!(
            hex::encode(pubkey_clean),
            vector[1],
            "[good case] agl/ed25519 ({i}) incorrect clean pubkey from privkey"
        );

        let pubkey = Randomized::mul_base_clamped(privkey);
        assert_eq!(
            hex::encode(pubkey.to_montgomery().to_bytes()),
            vector[2],
            "[good case] agl/ed25519 ({i}) incorrect pubkey from privkey"
        );

        let r1 = Randomized::to_representative(&privkey, 0u8)
            .expect("[good case] agl/ed25519 ({i}) failed to get representative from privkey");

        let repres = representative_from_pubkey(&pubkey, 0u8)
            .expect("[good case] agl/ed25519 ({i}) failed to get representative from pubkey");

        assert_eq!(hex::encode(r1), hex::encode(repres));
        assert_eq!(
            true_repres,
            hex::encode(repres),
            "[good case] agl/ed25519 ({i}) incorrect representative from privkey"
        );
    }
}

#[test]
#[cfg(feature = "elligator2")]
fn non_representable_points() {
    for (i, key) in ntor_invalid_keys().iter().enumerate() {
        let privkey = <[u8; 32]>::from_hex(key).expect("failed to decode hex privkey");

        // ensure that the representative can be reversed to recover the
        // original public key.
        let res: Option<[u8; 32]> = MontgomeryPoint(privkey).to_representative::<Randomized>(0u8);
        assert!(
            res.is_none(),
            "[bad case] agl/ed25519 ({i}) expected None, got Some({})",
            hex::encode(res.expect("this shouldn't happen"))
        );
    }
}

/// returns a set of keypair encodings generated by (a fork of) the golang
/// implementation agl/ed25519 which is used by the mainstream obfs4
/// library. Each set of three strings is
///
///   1) the generated private key scalar
///   2) the associated public key point when using normal mul_base_clamped
///   2) the associated public key point w/ cofactor creates using mul_base_clamped_dirty
///   3) the successfully created representative from the dirty publicKey
///
/// All of these are valid keypairs and our public key to
/// representative implementation (and repres-to-pubkey) should match and
/// handle these cases.
///
fn ntor_valid_test_vectors() -> [[&'static str; 4]; 21] {
    [
        [
            "b531f4243aa4a013f0f87a2eaaec47807844a2f375d40b774e824d37a196b2b6",
            "aa2d8f1c47f717d96edbf503ff0d9fa782849c486ad8a7c15b2bf4a793902c35",
            "04a47c7903661acf03cd71e5400c8b96650bb3620d2ae91b674713ca5f2ac673",
            "f30130eb1c192cda48a503932c8751232fd784ab7792acba499807e78084a909",
        ],
        [
            "d63f245d00c57683e8f3f7174b2601aa89319d39823e42aa388fb4f349b8df16",
            "97ed90e92c02c5a488d4d9589174867d0d640c460caf4c61833f6c6cb5f5f874",
            "3741b60e375affc17d0dba931bb0f5f4540c31c67a979c3399596103283dd27d",
            "3a50a823f482a7af1ac898446850dd643b9a68b530df4cebe7d9f108ebe8933b",
        ],
        [
            "2b6b4888ec2d23748f708627c1a9260b0f10dd2fbc941e44cd578d69760d9873",
            "79a9d72800606a520b580bdba40882fa78f13f61a4a402ef615cf01ef5875450",
            "d8db37c0fafe81757adcf4f580daff6f68b200a4a38965a4a71ced905e67ee26",
            "ed3b270440c2c9d6630bd2b92fd07ede4b8ac3881a286bc9d5f225e35e1d5a31",
        ],
        [
            "9228b2e3a95462b6d9f32cc326c3c55107972e9cb426301d33861bec15049b65",
            "995ac596a4c4f6da1a7ae3cc5ef9dcfb74443717a68dc03972882c9ba7db1823",
            "9d8ef0820c3ed0b0c7d29e178eaf31431ca4ee1e97cdab08ea6c85946a3e5e6b",
            "b918077e9e1283c0cc44055a28b97ea131e8517983ed033d60e99b818f55fe00",
        ],
        [
            "21af4b82c709c6dbf0a1aa28b7a045ea6a20448ec36c9f5f6eadf60c9a71ee66",
            "f8ac0dd56d7c9f7d681a8fec38675a39e37e2b9780995ce6cdc1f4da25356860",
            "41b49d99d7490aae2c774893d2f24147c353f4179ef318c1954899eb93ba7316",
            "e1d2992fce97a72d40483f940aa1156d34eea4e5789336155d718f0d74eb9e27",
        ],
        [
            "465fd0ac29e17ecadf922676a99a40e59ef20ed7d964663fce6d09cfe247599e",
            "5246cdd46625f43e590699a8c0f8740af173190036875c163fc9b430c72b301e",
            "9b85e75bfe129adf7e28d2ac1a8a2a186259c91e9afe5b60497f59fe48a61363",
            "cfa4592dc98b4625c70bcc5f5b39611043436e4d8818e977ae479e2321b4e731",
        ],
        [
            "f0bfc68ccc5cde3aac026b8668055c06bb286950197cf8df5b8546c2a55f8676",
            "51f046dc5d42d9a73fc12d9b3720723915f58b8b617584ae469bd081118c784d",
            "51f046dc5d42d9a73fc12d9b3720723915f58b8b617584ae469bd081118c784d",
            "0cb6b5eb789ec03c3561b6574554f1a3e9ceb265cf92e8f1edf03e445641e13a",
        ],
        [
            "3d4269b3aa052fa291db18183ebd9e05d0230faa7f474eaa28c7cebb191b552c",
            "22b0fa046129a0b3a1ddaacb7b62edd952d239aec38ea8c89bf00e15fe859547",
            "af0c7b6703225e5ff0260e2cec7c79ded10506c76f1fd86b6134b0b41481f05f",
            "932f7c251dfc76ca8fc893068ac7f76c82f311830bbc39a7d69ab1dc75adb419",
        ],
        [
            "2507de9b7116c8e38b8d9d4a9787c7ad58a5ac82c7cafca8f1f20ed13d41c07e",
            "a2a75aa84a1e31a332a49ef20767c0b4b7f2fc81784b720a6f39a666b3d28e53",
            "769d48797268911011619509485d5f68649bc56c208057de42188b7f4b6e4a40",
            "4b0946387189f8eb0d51ac2ca1156297cc69f3e7d681da2353af7b61055f6c04",
        ],
        [
            "ab675f987fa1ff564d9532b94103d382424c804e16f33278d5daf8460cafc12f",
            "d186d70dd4a861fe0b13bf5bdd43a28ffd5457128d47aee934b8efd4fa163972",
            "f3875d1c9118a39467f774837d5b73f26245add28adface6c3831d0b16311600",
            "55dc20e8bdfc4d13a6a3f1c49859f35248d1bda1d0db26efc02ccf407ec5670c",
        ],
        [
            "7f74e1ee4b024dfa1d0922f3b848891ca0bda69760a72354ee38c9a340293511",
            "1616f968954f044a8033d0639ef9eaa22658a8deb9d3bd75c4f900b8439ac053",
            "9511eb90311692dba1df5cabe16835545d8105a3a51bb1a4e2e3e77625789e59",
            "bab2454581ba3c31d61525e341c6e45dae64d63ddeb18ec7246104225d9aad27",
        ],
        [
            "38af5f517bc769ef83371332d83c438b9a15cafb94718c2d417a2b5595919325",
            "ba6d043159102150818942f0bfca69377198ce93d7df638814b4a84df74e7e3f",
            "ba6d043159102150818942f0bfca69377198ce93d7df638814b4a84df74e7e3f",
            "b3c91ba8db89652d7c93568e141479644b27fbefbb9f8ebd66697c2f3b40fc12",
        ],
        [
            "84b40c80c5c44f91e7165328f84db2507c8fd0fb58cd939705565dc60f98d4ab",
            "7cfb1e927d172cfd0fecf3616bd3077a1e485f8487f5f792a44af24602aeee78",
            "0796354388c13f2f43263a04791be6f341c0827dca22cf602e3711aeff3c270d",
            "33c419bdec3cbc5bf10811f53c8745e7832d38b0fd4f4975150989e763431702",
        ],
        [
            "fcb6c9a0acbea273445cc1c84c5fe486ba88f76ff6197e4d66732ac1b7905e0e",
            "a865fcb0d433c9205079046ddff9e3add7b3d5b85eabf77570aef6221625845a",
            "82d52b90191fa82e6125352d0df011f40d1c52c936d8472c80ab5f39be4dc275",
            "a500286f77a44da3954cd2d28bc6ceb698fe9b5f59296494cdba2223ed82781d",
        ],
        [
            "3a89d10d54534bc595f95b7266ea95a7509a13e35eaede55be49931c73e29f51",
            "9a2fd476dbc15148a72d2915223142060ebee6e8fce2a110bc00977d618f4354",
            "6d027e1197c78eeed729cdf0a08b25f6c2a36d726dcf2dc7592cbf22a64c4667",
            "26591aa301c6b90b41bb2d7d227b7513446a2281138135b606b2ccfd67073d28",
        ],
        [
            "5ad1beed45793f7e7fd2b59b1d3c64441087c31f5edbc71d5adacf3e87f3b409",
            "69947803a666ae9746282ec985bb140473bd2cca8e7e806e6b7c63dba12abf09",
            "e562faef7f4846624819ed16de66bfbc5cee8c7200d2579fa81ee00e457d0c41",
            "304f86219a3b6f8045038baa1d51271c69b4594582b05409fb08310d15893830",
        ],
        [
            "248c40bf9a05281c5c42d884c37d916c4dface070f936d293f30a1d05bce5caa",
            "ea506f676538b2aa4c60092026453ecb37a3562295be551d134cb334063aad4a",
            "27934d458e6c253b0211a6d5ffead34a7f18264c9744c8d860a5af02b486960e",
            "3fb9e265959e9ce605f662d983cf5c7606be10cf95dcf1eb96931d7d189fcd1f",
        ],
        [
            "88d60d17395bb4df69205cc2750bb2e83f8646aa56acaaeccdaec527e085bcc2",
            "ae62dc36e3f8bcc7c436cb8adb1b931af32bbe1501d048dc50d9947399f0ac0c",
            "ae62dc36e3f8bcc7c436cb8adb1b931af32bbe1501d048dc50d9947399f0ac0c",
            "1e8c4ba9a54eccd2bd9020c8333033857187eab8e17aa40f46e22acaca07d31e",
        ],
        [
            "39e952a23697e05cf624e82c36c36bb51d546ffef5aa4fc4d7b695a51cae499a",
            "8d04ce07d2251923e7c871df78ad6eb56db6c0c8b4b11864c2078f91dce17c1f",
            "94d13ad7430c8d95f9687b7f030bd22079471f02c96938fabe1d8eac13ad0e3b",
            "f33d05d0a975fcd9777db0e78a4c74ec161d90026c29dfc2bdaf79d1a24d6c0d",
        ],
        [
            "d6111d6215c5e799b92331c0e2984f25de42e9c02e37d53abad8b7cb2a9c5e9f",
            "8fb6b77c034c1b96eca447a1192e54e8efd14944595f2d8f37e0bb13b9537e59",
            "0bce86adc6fee70bb5ecb91c56afe59dd0cdf7a92bf6fa75347a48fa91bcb35c",
            "ff8143b7f3dd11e594ba558c0bc67116676376637971c03394d707a642f1fc25",
        ],
        [
            "d08d3be3602c52c45df91f7b8b16132f779e8336f88a4e6ad320874eaabf60a2",
            "04dd9e5f7311cb8ba72487effab05b8ecbd89f3c7f2e18733d2bda22a4ebd00e",
            "04dd9e5f7311cb8ba72487effab05b8ecbd89f3c7f2e18733d2bda22a4ebd00e",
            "80c34dd01d6832dbb2589120b905f302c8a7adf5b7aac0418c9c6ebb0fad4e35",
        ],
        // The following key sets have a v_in_sqrt value of 0
    ]
}

/// returns a set of private keys generated by (a fork of) the golang
/// implementation agl/ed25519 which is used by the mainstream obfs4
/// library.
///
/// All of these fail to generate a keypair capable of using elligator2
/// to encode of the public key.
///
#[cfg(feature = "elligator2")]
fn ntor_invalid_keys() -> [&'static str; 16] {
    [
        "e3457a03d99b91ab2860470a9501e03f30f4f91c9655c5d2700e43fc07262f3f",
        "f73f18d545882268e7ca793f717d175acb8c628af8de8445b0c5a0c4cca7fab8",
        "3e0b46dc90be39c8abc65231caabfa935ee055f83c4055b89fc189715c10c9fa",
        "8d2a6143e68ad022f544e13a21954a0615eb544e072399f31a4535c6bb5a4343",
        "42e01260c570a1be859ecce34b029acf600b7ef520e864a7c75cd122e4eb650b",
        "270eece8fa7e73fd071c4e7deefcd4f58553fa2572ef9b750605a48dfea959c0",
        "5f4dd2d5e3a4d3288a61b5f91f10e89b16ed1ae4496a06b15ae1b0fbd2b8c283",
        "01f7ca332f44b4467e4b336c16fb59dae75e2a81eef1f54a3a6352ab7c8cdb3c",
        "c3f3c1a6f5521a796f96889bbc36977eb9b80a479dee2213bdad4f5615a8877f",
        "222a8a00c74e1386c5ce7817c26d63e9c4bad0cd4799275cda4f5ca098f8fe64",
        "c54a7937d97d33c0782dcf5585db41f1bf69e0013bc0d8123e77468f1c0caec7",
        "9088b66f4b128156c2a600d26ee9c5468d22505b061351c2578067a83184f9a5",
        "7d5cc59a6b9ec4e0c5c8cf05e02809a77c3c21f78a035489c1f11defdceaf159",
        "53aa1fa8d06555851e24b6a0827d591d37a8eb434661014844048375fd2c3447",
        "d7781aae42b8d8b07146d92e575092ad94d7ab2d3a71f6303a3fee1436e61a29",
        "8d470a34b3b9e6f12348d70a60fb2eaaf9e920bc9ca157bc65c51fc7294c6333",
    ]
}
