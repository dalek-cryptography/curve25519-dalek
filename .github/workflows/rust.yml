name: Rust

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: '-D warnings'

jobs:
  test:
    name: Test All features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit target
          - target: i686-unknown-linux-gnu
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit target
          - target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }} --all-features
      - env:
          RUSTFLAGS: '--cfg curve25519_dalek_backend="fiat"'
        run: cargo test --target ${{ matrix.target }}

  # Test no_std with no features
  build-nostd-base:
    name: Build on no_std target (thumbv7em-none-eabi)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: thumbv7em-none-eabi
      - uses: taiki-e/install-action@cargo-hack
      # No default features build
      - run: cargo build --target thumbv7em-none-eabi --release --no-default-features

  # Test no_std integration with all no_std features
  build-nostd-features:
    name: Build on no_std target (thumbv7em-none-eabi)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: thumbv7em-none-eabi
      - uses: taiki-e/install-action@cargo-hack
      - run: cargo hack build --target thumbv7em-none-eabi --release --each-feature --exclude-features default,std

  build-simd:
    name: Build simd backend (nightly)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    # Build with AVX2 features, then with AVX512 features
    - env:
        RUSTFLAGS: '--cfg curve25519_dalek_backend="simd" -C target_feature=+avx2'
      run: cargo build --target x86_64-unknown-linux-gnu
    - env:
        RUSTFLAGS: '--cfg curve25519_dalek_backend="simd" -C target_feature=+avx512ifma'
      run: cargo build --target x86_64-unknown-linux-gnu

  build-docs:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - run: make doc
    - run: make doc-internal

  cross:
    strategy:
      matrix:
        include:
          # ARM32
          - target: armv7-unknown-linux-gnueabihf
            rust: stable

          # ARM64
          - target: aarch64-unknown-linux-gnu
            rust: stable

          # PPC32
          - target: powerpc-unknown-linux-gnu
            rust: stable

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ${{ matrix.deps }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: RustCrypto/actions/cross-install@master
      - run: cross test --release --target ${{ matrix.target }}

  nightly:
    name: Test nightly compiler
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo test

  clippy:
    name: Check that clippy is happy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - env:
        RUSTFLAGS: '--cfg curve25519_dalek_backend="simd" -C target_feature=+avx2'
      run: cargo clippy --target x86_64-unknown-linux-gnu
    - env:
        RUSTFLAGS: '--cfg curve25519_dalek_backend="simd" -C target_feature=+avx512ifma'
      run: cargo clippy --target x86_64-unknown-linux-gnu

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  msrv:
    name: Current MSRV is 1.60.0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # First run `cargo +nightly -Z minimal-verisons check` in order to get a
    # Cargo.lock with the oldest possible deps
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo -Z minimal-versions check --no-default-features --features serde
    # Now check that `cargo build` works with respect to the oldest possible
    # deps and the stated MSRV
    - uses: dtolnay/rust-toolchain@1.60.0
    - run: cargo build --no-default-features --features serde

  bench:
    name: Check that benchmarks compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Build u32 bench
      env:
        RUSTFLAGS: '--cfg curve25519_dalek_bits="32"'
      run: cargo build --benches
    - name: Build u64 bench
      env:
        RUSTFLAGS: '--cfg curve25519_dalek_bits="64"'
      run: cargo build --benches
    - name: Build default (host native) bench
      run: cargo build --benches
