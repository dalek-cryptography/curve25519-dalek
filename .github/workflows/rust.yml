name: Rust

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit target
          - target: i686-unknown-linux-gnu
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit target
          - target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features fiat_backend

  build-simd:
    name: Build simd backend (nightly)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    # Build with AVX2 features, then with AVX512 features
    - env:
        RUSTFLAGS: "-C target_feature=+avx2"
      run: cargo build --target x86_64-unknown-linux-gnu --features simd_backend
    - env:
        RUSTFLAGS: "-C target_feature=+avx512ifma"
      run: cargo build --target x86_64-unknown-linux-gnu --features simd_backend

  test-defaults-serde:
    name: Test default feature selection and serde
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - run: cargo test --features "serde"

  test-alloc-u32:
    name: Test no_std+alloc with u32 backend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - run: rustup target add i686-unknown-linux-gnu
    - run: sudo apt update && sudo apt install gcc-multilib
    - run: cargo test --lib --no-default-features --features alloc --target i686-unknown-linux-gnu

  nightly:
    name: Test nightly compiler
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo test --features "nightly"

  clippy:
    name: Check that clippy is happy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - env:
        RUSTFLAGS: "-C target_feature=+avx2"
      run: cargo clippy --target x86_64-unknown-linux-gnu --features simd_backend -- -D warnings
    - env:
        RUSTFLAGS: "-C target_feature=+avx512ifma"
      run: cargo clippy --target x86_64-unknown-linux-gnu --features simd_backend -- -D warnings

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  msrv:
    name: Current MSRV is 1.56.1
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # First run `cargo +nightly -Z minimal-verisons check` in order to get a
    # Cargo.lock with the oldest possible deps
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo -Z minimal-versions check --no-default-features --features fiat_backend,serde
    # Now check that `cargo build` works with respect to the oldest possible
    # deps and the stated MSRV
    - uses: dtolnay/rust-toolchain@1.56.1
    - run: cargo build --no-default-features --features fiat_backend,serde

  bench:
    name: Check that benchmarks compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Build u32 bench
      run: env RUSTFLAGS="--cfg curve25519_dalek_bits=\"32\"" cargo build --benches
    - name: Build u64 bench
      run: env RUSTFLAGS="--cfg curve25519_dalek_bits=\"64\"" cargo build --benches
    - name: Build default (host native) bench
      run: cargo build --benches
