name: curve25519 Rust

on:
  push:
    branches: [ '**' ]
    paths:
      - 'curve25519-dalek/**'
      - '.github/workflows/curve25519-dalek.yml'
  pull_request:
    branches: [ '**' ]
    paths:
      - 'curve25519-dalek/**'
      - '.github/workflows/curve25519-dalek.yml'

defaults:
  run:
    working-directory: curve25519-dalek

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: '-D warnings'

jobs:

  test-fiat:
    name: Test fiat backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit target
          - target: i686-unknown-linux-gnu
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit target
          - target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - env:
          RUSTFLAGS: '--cfg curve25519_dalek_backend="fiat"'
        run: cargo test --target ${{ matrix.target }}

  # Default no_std test only tests using serial across all crates
  build-nostd-fiat:
    name: Build fiat on no_std target (thumbv7em-none-eabi)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - crate: curve25519-dalek
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: thumbv7em-none-eabi
      - uses: taiki-e/install-action@cargo-hack
      # No default features build
      - name: no_std fiat / no feat ${{ matrix.crate }}
        env:
          RUSTFLAGS: '--cfg curve25519_dalek_backend="fiat"'
        run: cargo build -p ${{ matrix.crate }} --target thumbv7em-none-eabi --release --no-default-features
      - name: no_std fiat / cargo hack ${{ matrix.crate }}
        env:
          RUSTFLAGS: '--cfg curve25519_dalek_backend="fiat"'      
        run: cargo hack build -p ${{ matrix.crate }} --target thumbv7em-none-eabi --release --each-feature --exclude-features default,std,getrandom

  test-serial:
    name: Test serial backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit target
          - target: i686-unknown-linux-gnu
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit target
          - target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - env:
          RUSTFLAGS: '--cfg curve25519_dalek_backend="serial"'
        run: cargo test --target ${{ matrix.target }}

  build-script:
    name: Test Build Script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown,x86_64-unknown-linux-gnu,i686-unknown-linux-gnu
      - run: bash tests/build_tests.sh

  test-simd-nightly:
    name: Test simd backend (nightly)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - env:
        # This will:
        #   1) build all of the x86_64 SIMD code,
        #   2) run all of the SIMD-specific tests that the test runner supports,
        #   3) run all of the normal tests using the best available SIMD backend.
        # This should automatically pick up the simd backend in a x84_64 runner
        RUSTFLAGS: '-C target_cpu=native'
      run: cargo test --target x86_64-unknown-linux-gnu

  test-simd-stable:
    name: Test simd backend (stable)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - env:
        # This will run AVX2-specific tests and run all of the normal tests
        # with the AVX2 backend, even if the runner supports AVX512.
        # This should automatically pick up the simd backend in a x86_64 runner
        # It should pick AVX2 due to stable toolchain used since AVX512 requires nigthly
        RUSTFLAGS: '-C target_feature=+avx2'
      run: cargo test --no-default-features --features alloc,precomputed-tables,zeroize,group-bits --target x86_64-unknown-linux-gnu

  msrv:
    name: Current MSRV is 1.60.0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # Re-resolve Cargo.lock with minimal versions
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo update -Z minimal-versions
    # Now check that `cargo build` works with respect to the oldest possible
    # deps and the stated MSRV
    - uses: dtolnay/rust-toolchain@1.60.0
    - run: cargo build --no-default-features --features serde
    # Also make sure the AVX2 build works
    - run: cargo build --target x86_64-unknown-linux-gnu
